
public class LinkedNode <T> {
  private T data;
  private LinkedNode<T> next;
  
  public static void main(String[] args) {
    LinkedNode<String> list = new LinkedNode<>(
        "A", new LinkedNode<>(
        "B", new LinkedNode<>(
        "C", new LinkedNode<>(
        "D", new LinkedNode<>(
        "E", new LinkedNode<>(
        "F", new LinkedNode<>(
        "G", null )))))));
    
    // remove the first x from any list
    //list->*->*->*->*->*->*->*->*->*->*->*->*->*->*->null
//    // 1. find part of list that needs to change (the node before the one containing X)
//    LinkedNode<String> nodeBeforeX = list;
//    while( nodeBeforeX.next != null && 
//           !nodeBeforeX.next.data.equals("X") )
//    // 2. change that node's next reference to skip the node containin x
//    nodeBeforeX = nodeBeforeX.next;
    
    // special cases to consider after implementing the general case algorithm
    // 1) beginning (reference not store in node) vs middle vs end of list (next reference is null)
    // 2) remove from lists of size 0, 1, and many
    // 3) what if there are no xes, one x, or many xes

    if(list != null) { // only try to remove when list size >= 1
      if(list.data.equals("X")) // remove from head separately
        list = list.next; // because it does not involve changing a LinkedNode object
      else {
        LinkedNode<String> nodeBeforeX = list;
        while( nodeBeforeX.next != null && // avoid running off the end of the list
               !nodeBeforeX.next.data.equals("X") )
          nodeBeforeX = nodeBeforeX.next;
        if(nodeBeforeX.next != null) // only remove x, when the node before is found
          nodeBeforeX.next = nodeBeforeX.next.next;
      }
    }

    // code that displays the contents of this list
    for(LinkedNode<String> displayNext = list;
        displayNext != null;
        displayNext = displayNext.next)
      System.out.print( displayNext.data );
  }
  
  // generated by Eclipse:

  public LinkedNode(T data, LinkedNode<T> next) {
    super();
    this.data = data;
    this.next = next;
  }

  public T getData() {
    return data;
  }

  public void setData(T data) {
    this.data = data;
  }

  public LinkedNode<T> getNext() {
    return next;
  }

  public void setNext(LinkedNode<T> next) {
    this.next = next;
  }
}
